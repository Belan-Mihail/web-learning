import JSTestType from "../types/JSTestType";


const JSdata:JSTestType[] = [
    {
        initial_data: 'const arr1 = [1, 2, 3]',
        steps: [],
        expected_result: '',
        task: 'what method to use to find out the length of arr1?',
        variantA: '.length',
        variantB: '.indexOf(2)',
        variantC: '.length()',
        variantD: '.size()',
        variantE: '.lenth',
        variantF: 'length(arr1)',
        correctAnswer: '.length',
        additional_task: 'what is the length of the arr1?',
        add_variantA: '1',
        add_variantB: '2',
        add_variantC: '3',
        add_variantD: '4',
        add_variantE: '5',
        add_variantF: '6',
        correctAdditionalAnswer: '3',
        example: ['arr1.length'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = [3, 1, 2]',
        steps: [],
        expected_result: 'arr1 = [1, 2, 3]',
        task: 'how to get the expected result?',
        variantA: '.length',
        variantB: '.byLength',
        variantC: '.sortMin()',
        variantD: '.sort()',
        variantE: '',
        variantF: '',
        correctAnswer: '.sort()',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.sort()'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c"]',
        steps: [],
        expected_result: '',
        task: 'what method to use to add symbol "d" to the end of arr1?',
        variantA: '.shift(D)',
        variantB: '.push(d)',
        variantC: '.pop("D")',
        variantD: '.push(4)',
        variantE: '.push("d")',
        variantF: '.shift(4)',
        correctAnswer: '.push("d")',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.push("d")'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c"]',
        steps: [],
        expected_result: 'arr1 = ["D", "a", "b", "c"]',
        task: 'how to get the expected result?',
        variantA: '.shift("D")',
        variantB: '.push("d")',
        variantC: '.add("D")',
        variantD: '.unshift(d)',
        variantE: '.unshift("d")',
        variantF: '.unshift("D")',
        correctAnswer: '.unshift("D")',
        additional_task: 'arr1.unshift("A", "B")',
        add_variantA: 'arr1 = ["D", "B", "a", "b", "c"]',
        add_variantB: 'arr1 = ["A", "b", "a", "b", "c"]',
        add_variantC: 'arr1 = ["B", "A", "a", "b", "c"]',
        add_variantD: 'arr1 = ["A", "B", "a", "b", "c"]',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: 'arr1 = ["A", "B", "a", "b", "c"]',
        example: ['arr1.unshift("D")', 'arr1.unshift("A", "B")'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["300", "7", "40"].sort()',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1)',
        variantA: '["300", "7", "40"]',
        variantB: '["7", "300", "40"]',
        variantC: '["300", "40", "7"]',
        variantD: '["7", "40", "300"]',
        variantE: '',
        variantF: '',
        correctAnswer: '["300", "40", "7"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1)'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["Mike", "Billy", "Bobby", "Ann"].sort()',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1)',
        variantA: '["Ann", "Bobby", "Billy", "Mike"]',
        variantB: '["Ann", "Billy", "Bobby", "Mike"]',
        variantC: '["Mike", "Bobby", "Billy", "Ann"]',
        variantD: '["Mike", "Billy", "Bobby", "Ann"]',
        variantE: '',
        variantF: '',
        correctAnswer: '["Ann", "Billy", "Bobby", "Mike"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1)'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["Mike", "1", "Mike", "Ann"].reverse()',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1)',
        variantA: '["Ann", "Mike", "1", "Mike"]',
        variantB: '["Ann", "Mike", "Mike", "1"]',
        variantC: '["Ann", "Mile", "1", "Mike"]',
        variantD: '["Mike", "Mike", "Ann", "1"]',
        variantE: '["1", "Ann", "Mike", "Mike"]',
        variantF: '["1", "Mike", "Mike", "Ann"]',
        correctAnswer: '["Ann", "Mike", "1", "Mike"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1)'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["Mike", "1", "Mike", "Ann"]',
        steps: [],
        expected_result: 'arr1 = ["Mike", "1", "Mike"]',
        task: 'what method to use?',
        variantA: '.shift()',
        variantB: '.push("Ann")',
        variantC: '.unshift("Ann")',
        variantD: '.delete()',
        variantE: '.del("")',
        variantF: '.pop()',
        correctAnswer: '.pop()',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.pop()'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d"]',
        steps: [],
        expected_result: 'how to delete the last element of arr1?',
        task: 'what method to use?',
        variantA: '.arr1.pop()',
        variantB: 'arr1.shift()',
        variantC: 'arr1.pop()',
        variantD: 'arr1.pop(4)',
        variantE: 'arr1.pop("d")',
        variantF: 'arr1.del()',
        correctAnswer: 'arr1.pop()',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.pop()'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["c", "D", "m", "K"]',
        steps: ['const delete = arr1.pop()'],
        expected_result: '',
        task: 'What will be console.log(del)',
        variantA: '["c", "D", "m"]',
        variantB: 'C',
        variantC: 'k',
        variantD: '["K"]',
        variantE: 'K',
        variantF: 'undefined',
        correctAnswer: 'K',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(del)'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["a", "b", "c"]',
        steps: ['console.log(arr1.shift(a))'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["a", "a", "b", "c"]',
        variantB: 'mistake',
        variantC: 'a',
        variantD: '["a"]',
        variantE: '["a", "b", "c", "a"]',
        variantF: '["b", "c"]',
        correctAnswer: 'mistake',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1.shift())'],
        level: 'easy',
        category: 'array methods',
    },
    {
        initial_data: 'const arr1 = ["a", "b", "c"]',
        steps: [],
        expected_result: '',
        task: 'what method to use to add symbol "D" to the start of arr1?',
        variantA: '.unshift("d")',
        variantB: '.push(d)',
        variantC: '.pop("D")',
        variantD: '.unpush("D)',
        variantE: '.unshift("D")',
        variantF: '.shift("D")',
        correctAnswer: '.unshift("D")',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.unshift("D")'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["John", "Freddy", "Silvester", "Bobby"]',
        steps: [],
        expected_result: 'arr1 = ["Freddy", "Silvester", "Bobby"]',
        task: 'how to get the expected result?',
        variantA: '.shift()',
        variantB: '.push("John")',
        variantC: '.delete()',
        variantD: '.delete("John")',
        variantE: '.unshift()',
        variantF: '.pop()',
        correctAnswer: '.shift()',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.shift()'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["John", "Freddy", "Silvester", "Bobby"]',
        steps: ['arr1.shift()', 'arr1.pop()', 'console.log(arr1)'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["John", "Freddy", "Silvester", "Bobby"]',
        variantB: '["Freddy", "John", "Bobby", "Silvester"]',
        variantC: '["John", "Freddy", "Silvester"]',
        variantD: '["Freddy", "Silvester"]',
        variantE: '["John", "Bobby"]',
        variantF: '["Freddy", "Silvester", "Bobby"]',
        correctAnswer: '["Freddy", "Silvester"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.shift()', 'arr1.pop()', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["John", "Freddy", "Silvester", "Bobby"]',
        steps: ['arr1.shift()', 'arr1.unshift("Mike")', 'console.log(arr1)'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["John", "Freddy", "Silvester", "Bobby", "Mike"]',
        variantB: '["Mike", "John", "Bobby", "Silvester"]',
        variantC: '["Mike", "Freddy", "Silvester", "Bobby"]',
        variantD: '["Mike", "Freddy", "Silvester"]',
        variantE: '["John", "Bobby", "Mike", "Silvester"]',
        variantF: '["Freddy", "Silvester", "Bobby", "Mike"]',
        correctAnswer: '["Mike", "Freddy", "Silvester", "Bobby"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.shift()', 'arr1.unshift("Mike")', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["John", "Freddy", "Silvester", "Bobby"]',
        steps: ['arr1.shift()', 'arr1.push("1")', 'arr1.pop()', 'console.log(arr1)'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["John", "Freddy", "Silvester", "Bobby", "1"]',
        variantB: '["John", "Bobby", "Silvester", 1]',
        variantC: '["Freddy", "Silvester", "Bobby"]',
        variantD: '["John", "Freddy", "Silvester"]',
        variantE: '["John", "Bobby", "1"]',
        variantF: '["1", "Freddy", "Silvester", "Bobby"]',
        correctAnswer: '["Freddy", "Silvester", "Bobby"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.shift()', 'arr1.push("1")', 'arr1.pop()', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["dog", "cat", "pig", "cucumber"]',
        steps: ['arr1.unshift("tiger")', 'arr1.pop()', 'arr1.unshift("duck")', 'arr1.pop()', 'console.log(arr1)'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["tiger", "duck", "dog", "cat"]',
        variantB: '["duck", "tiger", "dog", "cat"]',
        variantC: '["tiger", "duck", "pig", "cucumber"]',
        variantD: '["duck", "tiger", "pig", "cucumber"]',
        variantE: '',
        variantF: '',
        correctAnswer: '["duck", "tiger", "dog", "cat"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.unshift("tiger")', 'arr1.pop()', 'arr1.unshift("duck")', 'arr1.pop()', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["T", "A", "N", "O", "S"]',
        steps: ['arr1.shift()', 'arr1.push(1)', 'arr1.shift()', 'arr1.push("4")', 'console.log(arr1)'],
        expected_result: '',
        task: 'What will be in console?',
        variantA: '["N", "O", "S", 1, 4]',
        variantB: '["T", "A", "N", 1, "4"]',
        variantC: '["T", "A", "N", 14]',
        variantD: '["N", "O", "S", 1, "4"]',
        variantE: '["N", "O", "S", 14]',
        variantF: '["T", "A", "N", 1, 4]',
        correctAnswer: '["N", "O", "S", 1, "4"]',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.unshift("tiger")', 'arr1.pop()', 'arr1.unshift("duck")', 'arr1.pop()', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.at(5))?',
        variantA: 'd',
        variantB: '1',
        variantC: '2',
        variantD: '3',
        variantE: '',
        variantF: '',
        correctAnswer: '2',
        additional_task: 'console.log(arr1.at(1))?',
        add_variantA: 'a',
        add_variantB: 'b',
        add_variantC: 'c',
        add_variantD: '4',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: 'b',
        example: ['console.log(arr1.at(5))', 'console.log(arr1.at(1))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.at(arr1.length - 2))?',
        variantA: 'd',
        variantB: '1',
        variantC: '2',
        variantD: '3',
        variantE: '',
        variantF: '',
        correctAnswer: '3',
        additional_task: 'console.log(arr1.at(arr1.length - 6))?',
        add_variantA: 'a',
        add_variantB: 'b',
        add_variantC: 'c',
        add_variantD: '4',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: 'c',
        example: ['console.log(arr1.at(arr1.length - 2))', 'console.log(arr1.at(arr1.length - 6))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.at(arr1.length))?',
        variantA: 'd',
        variantB: '1',
        variantC: '2',
        variantD: '3',
        variantE: 'undefined',
        variantF: '4',
        correctAnswer: 'undefined',
        additional_task: 'console.log(arr1.at(arr1.length - 8))?',
        add_variantA: 'a',
        add_variantB: 'b',
        add_variantC: 'c',
        add_variantD: '4',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: 'a',
        example: ['console.log(arr1.at(arr1.length))', 'console.log(arr1.at(arr1.length - 8))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'what method to use to find out index of "d"?',
        variantA: 'at("d")',
        variantB: 'index("d")',
        variantC: 'indexof("d")',
        variantD: 'index_of("d")',
        variantE: 'atindexOf("d")',
        variantF: 'indexOf("d")',
        correctAnswer: 'indexOf("d")',
        additional_task: 'what is the index of element "d"?',
        add_variantA: '3',
        add_variantB: '4',
        add_variantC: '5',
        add_variantD: '2',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '3',
        example: ['console.log(arr1.indexOf("d"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'what are the index of elements "3", "b", "c"?',
        variantA: '7, 2, 3',
        variantB: '6, 2, 1',
        variantC: '6, 1, 2',
        variantD: '7, 2, 1',
        variantE: '7, 1, 2',
        variantF: '8, 2, 3',
        correctAnswer: '6, 1, 2',
        additional_task: 'what are the index of elements "4", "2", "a"?',
        add_variantA: '7, 5, 1',
        add_variantB: '8, 6, 1',
        add_variantC: '6, 4, 0',
        add_variantD: '7, 5, 0',
        add_variantE: '7, 4, 0',
        add_variantF: '6, 5, 0',
        correctAdditionalAnswer: '7, 5, 0',
        example: ['console.log(arr1.indexOf("3"))', 'console.log(arr1.indexOf("b"))', 'console.log(arr1.indexOf("c"))', 'console.log(arr1.indexOf("4"))', 'console.log(arr1.indexOf("2"))', 'console.log(arr1.indexOf("a"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["a", "b", "c", "d", "1", "2", "3", "4"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.at(arr1.length - 2) - arr1.indexOf("2"))?',
        variantA: '0',
        variantB: '1',
        variantC: '-1',
        variantD: '2',
        variantE: '-2',
        variantF: 'NaN',
        correctAnswer: '-2',
        additional_task: 'console.log(arr1.at(arr1.length - 6) + arr1.indexOf("2"))?',
        add_variantA: '3',
        add_variantB: 'c4',
        add_variantC: 'd5',
        add_variantD: '2',
        add_variantE: '12',
        add_variantF: 'c5',
        correctAdditionalAnswer: 'c5',
        example: ['console.log(arr1.at(arr1.length - 2) - arr1.indexOf("2"))', 'console.log(arr1.at(arr1.length - 6) + arr1.indexOf("2"))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["Everyone in the world loves pandas"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.includes("very"))',
        variantA: 'false',
        variantB: 'true',
        variantC: 'no',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'false',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1.includes("very"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["<a", "<b", "C>", "d<"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.includes("C<"))',
        variantA: 'false',
        variantB: 'true',
        variantC: 'no',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'false',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1.includes("c>"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["boom", "boam", "Baom", "baon"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.includes("boan"))',
        variantA: 'false',
        variantB: 'true',
        variantC: 'no',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'false',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1.includes("boan"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["cat", "dog", "duck"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.includes("cat"))?',
        variantA: 'yes',
        variantB: 'true',
        variantC: 'no',
        variantD: 'false',
        variantE: '',
        variantF: '',
        correctAnswer: 'true',
        additional_task: 'console.log(arr1.includes("at"))?',
        add_variantA: 'no',
        add_variantB: 'yes',
        add_variantC: 'False',
        add_variantD: 'true',
        add_variantE: 'True',
        add_variantF: 'false',
        correctAdditionalAnswer: 'false',
        example: ['console.log(arr1.includes("at"))'],
        level: 'easy',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = [1, 2, 3]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.every((num) => num >= 3 ))?',
        variantA: 'yes',
        variantB: 'true',
        variantC: 'not all',
        variantD: 'false',
        variantE: '',
        variantF: '',
        correctAnswer: 'false',
        additional_task: 'console.log(arr1.every((num) => num + arr1.length ))',
        add_variantA: '["4", "5", "6"]',
        add_variantB: '[4, 5, 6]',
        add_variantC: '[1, 2, 3]',
        add_variantD: 'true',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: 'true',
        example: ['console.log(arr1.every((num) => num >= 3 ))', 'console.log(arr1.every((num) => num + arr1.length ))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["A", "bab", "ca", "aa"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.every((num) => num.includes("a")))?',
        variantA: 'yes',
        variantB: 'true',
        variantC: 'not',
        variantD: 'false',
        variantE: '["A", "bab", "ca", "aa"]',
        variantF: '[false, true, true, true]',
        correctAnswer: 'false',
        additional_task: 'console.log(arr1.every((num) => num.includes("a") || num.includes("A")))',
        add_variantA: '["A", "bab", "ca", "aa"]',
        add_variantB: 'false',
        add_variantC: 'True',
        add_variantD: 'true',
        add_variantE: '[true, true, true, true]',
        add_variantF: 'False',
        correctAdditionalAnswer: 'true',
        example: ['console.log(arr1.every((num) => num.includes("a")))', 'console.log(arr1.every((num) => num.includes("a") || num.includes("A")))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = [2, 4, 8, 16]',
        steps: ['arr1.map((item) =>  item * 2)'],
        expected_result: '',
        task: 'console.log(arr1.every((item) => item > 3))?',
        variantA: 'false',
        variantB: 'true',
        variantC: 'not',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'false',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.map((item) =>  item * 2)', 'console.log(arr1.every((item) => item > 3))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = [2, 4, 8, 16]',
        steps: ['const res = arr1.map((item) =>  item * 2)'],
        expected_result: '',
        task: 'console.log(res.every((item) => item > 3))?',
        variantA: 'false',
        variantB: 'true',
        variantC: 'not',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'true',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['const res = arr1.map((item) =>  item * 2)', 'console.log(res.every((item) => item > 3))'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = [2, 4, 8, 16]',
        steps: ['arr1.map((item) =>  item * 4)'],
        expected_result: '',
        task: 'console.log(arr1.some((item) => item > 3))?',
        variantA: 'false',
        variantB: 'true',
        variantC: 'not',
        variantD: 'yes',
        variantE: '',
        variantF: '',
        correctAnswer: 'true',
        additional_task: 'console.log(arr1)?',
        add_variantA: '[2, 4, 8, 16]',
        add_variantB: '[8, 16, 32, 64]',
        add_variantC: 'mistake',
        add_variantD: '[2, 16, 32, 64]',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['arr1.map((item) =>  item * 4)', 'console.log(arr1.some((item) => item > 3))', 'console.log(arr1)'],
        level: 'medium',
        category: 'array methods',

    },
    {
        initial_data: 'const arr1 = ["cat", "dog", "duck", "monkey"]',
        steps: [],
        expected_result: '',
        task: 'console.log(arr1.some((item) => item.includes("on")))?',
        variantA: 'yes',
        variantB: 'true',
        variantC: 'no',
        variantD: 'false',
        variantE: '',
        variantF: '',
        correctAnswer: 'true',
        additional_task: '',
        add_variantA: '',
        add_variantB: '',
        add_variantC: '',
        add_variantD: '',
        add_variantE: '',
        add_variantF: '',
        correctAdditionalAnswer: '',
        example: ['console.log(arr1.some((item) => item.includes("on")))'],
        level: 'easy',
        category: 'array methods',

    },
    
    
    

]

export default JSdata;